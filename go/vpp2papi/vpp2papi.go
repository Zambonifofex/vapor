// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package vpp2papi

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"github.com/ufoot/vapor/go/vpcommonapi"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = vpcommonapi.GoUnusedProtection__

type VpP2pApi interface {
	vpcommonapi.VpCommonApi
	//VpP2pApi is used to communicate between 2 Vapor nodes
	//in peer-to-peer mode.

	Status() (r *HostStatus, err error)
	// Parameters:
	//  - Request
	GetSuccessors(request *GetSuccessorsRequest) (r *GetSuccessorsResponse, err error)
	// Parameters:
	//  - Request
	Lookup(request *LookupRequest) (r *LookupResponse, err error)
}

//VpP2pApi is used to communicate between 2 Vapor nodes
//in peer-to-peer mode.
type VpP2pApiClient struct {
	*vpcommonapi.VpCommonApiClient
}

func NewVpP2pApiClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *VpP2pApiClient {
	return &VpP2pApiClient{VpCommonApiClient: vpcommonapi.NewVpCommonApiClientFactory(t, f)}
}

func NewVpP2pApiClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *VpP2pApiClient {
	return &VpP2pApiClient{VpCommonApiClient: vpcommonapi.NewVpCommonApiClientProtocol(t, iprot, oprot)}
}

func (p *VpP2pApiClient) Status() (r *HostStatus, err error) {
	if err = p.sendStatus(); err != nil {
		return
	}
	return p.recvStatus()
}

func (p *VpP2pApiClient) sendStatus() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("Status", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := VpP2pApiStatusArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *VpP2pApiClient) recvStatus() (value *HostStatus, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "Status" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "Status failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "Status failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error13 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error14 error
		error14, err = error13.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error14
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "Status failed: invalid message type")
		return
	}
	result := VpP2pApiStatusResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *VpP2pApiClient) GetSuccessors(request *GetSuccessorsRequest) (r *GetSuccessorsResponse, err error) {
	if err = p.sendGetSuccessors(request); err != nil {
		return
	}
	return p.recvGetSuccessors()
}

func (p *VpP2pApiClient) sendGetSuccessors(request *GetSuccessorsRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetSuccessors", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := VpP2pApiGetSuccessorsArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *VpP2pApiClient) recvGetSuccessors() (value *GetSuccessorsResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetSuccessors" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetSuccessors failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetSuccessors failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error15 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error16 error
		error16, err = error15.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error16
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetSuccessors failed: invalid message type")
		return
	}
	result := VpP2pApiGetSuccessorsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *VpP2pApiClient) Lookup(request *LookupRequest) (r *LookupResponse, err error) {
	if err = p.sendLookup(request); err != nil {
		return
	}
	return p.recvLookup()
}

func (p *VpP2pApiClient) sendLookup(request *LookupRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("Lookup", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := VpP2pApiLookupArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *VpP2pApiClient) recvLookup() (value *LookupResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "Lookup" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "Lookup failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "Lookup failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error17 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error18 error
		error18, err = error17.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error18
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "Lookup failed: invalid message type")
		return
	}
	result := VpP2pApiLookupResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type VpP2pApiProcessor struct {
	*vpcommonapi.VpCommonApiProcessor
}

func NewVpP2pApiProcessor(handler VpP2pApi) *VpP2pApiProcessor {
	self19 := &VpP2pApiProcessor{vpcommonapi.NewVpCommonApiProcessor(handler)}
	self19.AddToProcessorMap("Status", &vpP2pApiProcessorStatus{handler: handler})
	self19.AddToProcessorMap("GetSuccessors", &vpP2pApiProcessorGetSuccessors{handler: handler})
	self19.AddToProcessorMap("Lookup", &vpP2pApiProcessorLookup{handler: handler})
	return self19
}

type vpP2pApiProcessorStatus struct {
	handler VpP2pApi
}

func (p *vpP2pApiProcessorStatus) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := VpP2pApiStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Status", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := VpP2pApiStatusResult{}
	var retval *HostStatus
	var err2 error
	if retval, err2 = p.handler.Status(); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Status: "+err2.Error())
		oprot.WriteMessageBegin("Status", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("Status", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type vpP2pApiProcessorGetSuccessors struct {
	handler VpP2pApi
}

func (p *vpP2pApiProcessorGetSuccessors) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := VpP2pApiGetSuccessorsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetSuccessors", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := VpP2pApiGetSuccessorsResult{}
	var retval *GetSuccessorsResponse
	var err2 error
	if retval, err2 = p.handler.GetSuccessors(args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetSuccessors: "+err2.Error())
		oprot.WriteMessageBegin("GetSuccessors", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetSuccessors", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type vpP2pApiProcessorLookup struct {
	handler VpP2pApi
}

func (p *vpP2pApiProcessorLookup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := VpP2pApiLookupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Lookup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := VpP2pApiLookupResult{}
	var retval *LookupResponse
	var err2 error
	if retval, err2 = p.handler.Lookup(args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Lookup: "+err2.Error())
		oprot.WriteMessageBegin("Lookup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("Lookup", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type VpP2pApiStatusArgs struct {
}

func NewVpP2pApiStatusArgs() *VpP2pApiStatusArgs {
	return &VpP2pApiStatusArgs{}
}

func (p *VpP2pApiStatusArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *VpP2pApiStatusArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Status_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *VpP2pApiStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VpP2pApiStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
type VpP2pApiStatusResult struct {
	Success *HostStatus `thrift:"success,0" json:"success,omitempty"`
}

func NewVpP2pApiStatusResult() *VpP2pApiStatusResult {
	return &VpP2pApiStatusResult{}
}

var VpP2pApiStatusResult_Success_DEFAULT *HostStatus

func (p *VpP2pApiStatusResult) GetSuccess() *HostStatus {
	if !p.IsSetSuccess() {
		return VpP2pApiStatusResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VpP2pApiStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VpP2pApiStatusResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *VpP2pApiStatusResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &HostStatus{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *VpP2pApiStatusResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Status_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *VpP2pApiStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *VpP2pApiStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VpP2pApiStatusResult(%+v)", *p)
}

// Attributes:
//  - Request
type VpP2pApiGetSuccessorsArgs struct {
	Request *GetSuccessorsRequest `thrift:"request,1" json:"request"`
}

func NewVpP2pApiGetSuccessorsArgs() *VpP2pApiGetSuccessorsArgs {
	return &VpP2pApiGetSuccessorsArgs{}
}

var VpP2pApiGetSuccessorsArgs_Request_DEFAULT *GetSuccessorsRequest

func (p *VpP2pApiGetSuccessorsArgs) GetRequest() *GetSuccessorsRequest {
	if !p.IsSetRequest() {
		return VpP2pApiGetSuccessorsArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *VpP2pApiGetSuccessorsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *VpP2pApiGetSuccessorsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *VpP2pApiGetSuccessorsArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &GetSuccessorsRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *VpP2pApiGetSuccessorsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetSuccessors_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *VpP2pApiGetSuccessorsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *VpP2pApiGetSuccessorsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VpP2pApiGetSuccessorsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type VpP2pApiGetSuccessorsResult struct {
	Success *GetSuccessorsResponse `thrift:"success,0" json:"success,omitempty"`
}

func NewVpP2pApiGetSuccessorsResult() *VpP2pApiGetSuccessorsResult {
	return &VpP2pApiGetSuccessorsResult{}
}

var VpP2pApiGetSuccessorsResult_Success_DEFAULT *GetSuccessorsResponse

func (p *VpP2pApiGetSuccessorsResult) GetSuccess() *GetSuccessorsResponse {
	if !p.IsSetSuccess() {
		return VpP2pApiGetSuccessorsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VpP2pApiGetSuccessorsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VpP2pApiGetSuccessorsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *VpP2pApiGetSuccessorsResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &GetSuccessorsResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *VpP2pApiGetSuccessorsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetSuccessors_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *VpP2pApiGetSuccessorsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *VpP2pApiGetSuccessorsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VpP2pApiGetSuccessorsResult(%+v)", *p)
}

// Attributes:
//  - Request
type VpP2pApiLookupArgs struct {
	Request *LookupRequest `thrift:"request,1" json:"request"`
}

func NewVpP2pApiLookupArgs() *VpP2pApiLookupArgs {
	return &VpP2pApiLookupArgs{}
}

var VpP2pApiLookupArgs_Request_DEFAULT *LookupRequest

func (p *VpP2pApiLookupArgs) GetRequest() *LookupRequest {
	if !p.IsSetRequest() {
		return VpP2pApiLookupArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *VpP2pApiLookupArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *VpP2pApiLookupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *VpP2pApiLookupArgs) readField1(iprot thrift.TProtocol) error {
	p.Request = &LookupRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *VpP2pApiLookupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Lookup_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *VpP2pApiLookupArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *VpP2pApiLookupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VpP2pApiLookupArgs(%+v)", *p)
}

// Attributes:
//  - Success
type VpP2pApiLookupResult struct {
	Success *LookupResponse `thrift:"success,0" json:"success,omitempty"`
}

func NewVpP2pApiLookupResult() *VpP2pApiLookupResult {
	return &VpP2pApiLookupResult{}
}

var VpP2pApiLookupResult_Success_DEFAULT *LookupResponse

func (p *VpP2pApiLookupResult) GetSuccess() *LookupResponse {
	if !p.IsSetSuccess() {
		return VpP2pApiLookupResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VpP2pApiLookupResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VpP2pApiLookupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *VpP2pApiLookupResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &LookupResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *VpP2pApiLookupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Lookup_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *VpP2pApiLookupResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *VpP2pApiLookupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VpP2pApiLookupResult(%+v)", *p)
}
