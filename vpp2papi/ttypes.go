// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package vpp2papi

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"github.com/ufoot/vapor/vpcommonapi"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = vpcommonapi.GoUnusedProtection__
var GoUnusedProtection__ int

// HostInfo contains static informations about a host.
//
// Attributes:
//  - HostTitle
//  - HostURL
//  - HostPubKey
//  - HostSig
type HostInfo struct {
	HostTitle  string `thrift:"HostTitle,1" json:"HostTitle"`
	HostURL    string `thrift:"HostURL,2" json:"HostURL"`
	HostPubKey []byte `thrift:"HostPubKey,3" json:"HostPubKey"`
	HostSig    []byte `thrift:"HostSig,4" json:"HostSig"`
}

func NewHostInfo() *HostInfo {
	return &HostInfo{}
}

func (p *HostInfo) GetHostTitle() string {
	return p.HostTitle
}

func (p *HostInfo) GetHostURL() string {
	return p.HostURL
}

func (p *HostInfo) GetHostPubKey() []byte {
	return p.HostPubKey
}

func (p *HostInfo) GetHostSig() []byte {
	return p.HostSig
}
func (p *HostInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HostInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.HostTitle = v
	}
	return nil
}

func (p *HostInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.HostURL = v
	}
	return nil
}

func (p *HostInfo) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.HostPubKey = v
	}
	return nil
}

func (p *HostInfo) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.HostSig = v
	}
	return nil
}

func (p *HostInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("HostInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HostInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("HostTitle", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:HostTitle: ", p), err)
	}
	if err := oprot.WriteString(string(p.HostTitle)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.HostTitle (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:HostTitle: ", p), err)
	}
	return err
}

func (p *HostInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("HostURL", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:HostURL: ", p), err)
	}
	if err := oprot.WriteString(string(p.HostURL)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.HostURL (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:HostURL: ", p), err)
	}
	return err
}

func (p *HostInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("HostPubKey", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:HostPubKey: ", p), err)
	}
	if err := oprot.WriteBinary(p.HostPubKey); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.HostPubKey (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:HostPubKey: ", p), err)
	}
	return err
}

func (p *HostInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("HostSig", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:HostSig: ", p), err)
	}
	if err := oprot.WriteBinary(p.HostSig); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.HostSig (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:HostSig: ", p), err)
	}
	return err
}

func (p *HostInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HostInfo(%+v)", *p)
}

// NodeInfo contains static informations about a node.
//
// Attributes:
//  - NodeID
//  - RingID
//  - HostPubKey
//  - NodeSig
type NodeInfo struct {
	NodeID     []byte `thrift:"NodeID,1" json:"NodeID"`
	RingID     []byte `thrift:"RingID,2" json:"RingID"`
	HostPubKey []byte `thrift:"HostPubKey,3" json:"HostPubKey"`
	NodeSig    []byte `thrift:"NodeSig,4" json:"NodeSig"`
}

func NewNodeInfo() *NodeInfo {
	return &NodeInfo{}
}

func (p *NodeInfo) GetNodeID() []byte {
	return p.NodeID
}

func (p *NodeInfo) GetRingID() []byte {
	return p.RingID
}

func (p *NodeInfo) GetHostPubKey() []byte {
	return p.HostPubKey
}

func (p *NodeInfo) GetNodeSig() []byte {
	return p.NodeSig
}
func (p *NodeInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NodeInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.NodeID = v
	}
	return nil
}

func (p *NodeInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RingID = v
	}
	return nil
}

func (p *NodeInfo) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.HostPubKey = v
	}
	return nil
}

func (p *NodeInfo) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.NodeSig = v
	}
	return nil
}

func (p *NodeInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NodeInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NodeInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("NodeID", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:NodeID: ", p), err)
	}
	if err := oprot.WriteBinary(p.NodeID); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.NodeID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:NodeID: ", p), err)
	}
	return err
}

func (p *NodeInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("RingID", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:RingID: ", p), err)
	}
	if err := oprot.WriteBinary(p.RingID); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.RingID (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:RingID: ", p), err)
	}
	return err
}

func (p *NodeInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("HostPubKey", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:HostPubKey: ", p), err)
	}
	if err := oprot.WriteBinary(p.HostPubKey); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.HostPubKey (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:HostPubKey: ", p), err)
	}
	return err
}

func (p *NodeInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("NodeSig", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:NodeSig: ", p), err)
	}
	if err := oprot.WriteBinary(p.NodeSig); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.NodeSig (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:NodeSig: ", p), err)
	}
	return err
}

func (p *NodeInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NodeInfo(%+v)", *p)
}

// RingConfig contains functional parameters of a ring.
//
// Attributes:
//  - BruijnM
//  - BruijnN
//  - NbCopy
//  - NbStep
type RingConfig struct {
	BruijnM int32 `thrift:"BruijnM,1" json:"BruijnM"`
	BruijnN int32 `thrift:"BruijnN,2" json:"BruijnN"`
	NbCopy  int32 `thrift:"NbCopy,3" json:"NbCopy"`
	NbStep  int32 `thrift:"NbStep,4" json:"NbStep"`
}

func NewRingConfig() *RingConfig {
	return &RingConfig{}
}

func (p *RingConfig) GetBruijnM() int32 {
	return p.BruijnM
}

func (p *RingConfig) GetBruijnN() int32 {
	return p.BruijnN
}

func (p *RingConfig) GetNbCopy() int32 {
	return p.NbCopy
}

func (p *RingConfig) GetNbStep() int32 {
	return p.NbStep
}
func (p *RingConfig) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RingConfig) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.BruijnM = v
	}
	return nil
}

func (p *RingConfig) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.BruijnN = v
	}
	return nil
}

func (p *RingConfig) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.NbCopy = v
	}
	return nil
}

func (p *RingConfig) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.NbStep = v
	}
	return nil
}

func (p *RingConfig) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RingConfig"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RingConfig) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("BruijnM", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:BruijnM: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.BruijnM)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.BruijnM (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:BruijnM: ", p), err)
	}
	return err
}

func (p *RingConfig) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("BruijnN", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:BruijnN: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.BruijnN)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.BruijnN (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:BruijnN: ", p), err)
	}
	return err
}

func (p *RingConfig) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("NbCopy", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:NbCopy: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.NbCopy)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.NbCopy (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:NbCopy: ", p), err)
	}
	return err
}

func (p *RingConfig) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("NbStep", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:NbStep: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.NbStep)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.NbStep (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:NbStep: ", p), err)
	}
	return err
}

func (p *RingConfig) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RingConfig(%+v)", *p)
}

// RingInfo contains static informations about a ring.
//
// Attributes:
//  - RingID
//  - RingTitle
//  - RingDescription
//  - AppID
//  - Config
//  - HasPassword
//  - HostPubKey
//  - RingSig
type RingInfo struct {
	RingID          []byte      `thrift:"RingID,1" json:"RingID"`
	RingTitle       string      `thrift:"RingTitle,2" json:"RingTitle"`
	RingDescription string      `thrift:"RingDescription,3" json:"RingDescription"`
	AppID           []byte      `thrift:"AppID,4" json:"AppID"`
	Config          *RingConfig `thrift:"Config,5" json:"Config"`
	HasPassword     bool        `thrift:"HasPassword,6" json:"HasPassword"`
	HostPubKey      []byte      `thrift:"HostPubKey,7" json:"HostPubKey"`
	RingSig         []byte      `thrift:"RingSig,8" json:"RingSig"`
}

func NewRingInfo() *RingInfo {
	return &RingInfo{}
}

func (p *RingInfo) GetRingID() []byte {
	return p.RingID
}

func (p *RingInfo) GetRingTitle() string {
	return p.RingTitle
}

func (p *RingInfo) GetRingDescription() string {
	return p.RingDescription
}

func (p *RingInfo) GetAppID() []byte {
	return p.AppID
}

var RingInfo_Config_DEFAULT *RingConfig

func (p *RingInfo) GetConfig() *RingConfig {
	if !p.IsSetConfig() {
		return RingInfo_Config_DEFAULT
	}
	return p.Config
}

func (p *RingInfo) GetHasPassword() bool {
	return p.HasPassword
}

func (p *RingInfo) GetHostPubKey() []byte {
	return p.HostPubKey
}

func (p *RingInfo) GetRingSig() []byte {
	return p.RingSig
}
func (p *RingInfo) IsSetConfig() bool {
	return p.Config != nil
}

func (p *RingInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RingInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.RingID = v
	}
	return nil
}

func (p *RingInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RingTitle = v
	}
	return nil
}

func (p *RingInfo) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.RingDescription = v
	}
	return nil
}

func (p *RingInfo) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.AppID = v
	}
	return nil
}

func (p *RingInfo) readField5(iprot thrift.TProtocol) error {
	p.Config = &RingConfig{}
	if err := p.Config.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Config), err)
	}
	return nil
}

func (p *RingInfo) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.HasPassword = v
	}
	return nil
}

func (p *RingInfo) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.HostPubKey = v
	}
	return nil
}

func (p *RingInfo) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.RingSig = v
	}
	return nil
}

func (p *RingInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RingInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RingInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("RingID", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:RingID: ", p), err)
	}
	if err := oprot.WriteBinary(p.RingID); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.RingID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:RingID: ", p), err)
	}
	return err
}

func (p *RingInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("RingTitle", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:RingTitle: ", p), err)
	}
	if err := oprot.WriteString(string(p.RingTitle)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.RingTitle (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:RingTitle: ", p), err)
	}
	return err
}

func (p *RingInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("RingDescription", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:RingDescription: ", p), err)
	}
	if err := oprot.WriteString(string(p.RingDescription)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.RingDescription (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:RingDescription: ", p), err)
	}
	return err
}

func (p *RingInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("AppID", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:AppID: ", p), err)
	}
	if err := oprot.WriteBinary(p.AppID); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.AppID (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:AppID: ", p), err)
	}
	return err
}

func (p *RingInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Config", thrift.STRUCT, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Config: ", p), err)
	}
	if err := p.Config.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Config), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Config: ", p), err)
	}
	return err
}

func (p *RingInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("HasPassword", thrift.BOOL, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:HasPassword: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.HasPassword)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.HasPassword (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:HasPassword: ", p), err)
	}
	return err
}

func (p *RingInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("HostPubKey", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:HostPubKey: ", p), err)
	}
	if err := oprot.WriteBinary(p.HostPubKey); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.HostPubKey (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:HostPubKey: ", p), err)
	}
	return err
}

func (p *RingInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("RingSig", thrift.STRING, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:RingSig: ", p), err)
	}
	if err := oprot.WriteBinary(p.RingSig); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.RingSig (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:RingSig: ", p), err)
	}
	return err
}

func (p *RingInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RingInfo(%+v)", *p)
}

// ContextInfo contains static informations about the program
// calling a fonction, it gives context.
//
// Attributes:
//  - SourceHost
//  - SourceRing
//  - SourceNode
//  - TargetNodeID
type ContextInfo struct {
	SourceHost   *HostInfo `thrift:"sourceHost,1" json:"sourceHost"`
	SourceRing   *RingInfo `thrift:"sourceRing,2" json:"sourceRing"`
	SourceNode   *NodeInfo `thrift:"sourceNode,3" json:"sourceNode"`
	TargetNodeID []byte    `thrift:"targetNodeID,4" json:"targetNodeID"`
}

func NewContextInfo() *ContextInfo {
	return &ContextInfo{}
}

var ContextInfo_SourceHost_DEFAULT *HostInfo

func (p *ContextInfo) GetSourceHost() *HostInfo {
	if !p.IsSetSourceHost() {
		return ContextInfo_SourceHost_DEFAULT
	}
	return p.SourceHost
}

var ContextInfo_SourceRing_DEFAULT *RingInfo

func (p *ContextInfo) GetSourceRing() *RingInfo {
	if !p.IsSetSourceRing() {
		return ContextInfo_SourceRing_DEFAULT
	}
	return p.SourceRing
}

var ContextInfo_SourceNode_DEFAULT *NodeInfo

func (p *ContextInfo) GetSourceNode() *NodeInfo {
	if !p.IsSetSourceNode() {
		return ContextInfo_SourceNode_DEFAULT
	}
	return p.SourceNode
}

func (p *ContextInfo) GetTargetNodeID() []byte {
	return p.TargetNodeID
}
func (p *ContextInfo) IsSetSourceHost() bool {
	return p.SourceHost != nil
}

func (p *ContextInfo) IsSetSourceRing() bool {
	return p.SourceRing != nil
}

func (p *ContextInfo) IsSetSourceNode() bool {
	return p.SourceNode != nil
}

func (p *ContextInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ContextInfo) readField1(iprot thrift.TProtocol) error {
	p.SourceHost = &HostInfo{}
	if err := p.SourceHost.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SourceHost), err)
	}
	return nil
}

func (p *ContextInfo) readField2(iprot thrift.TProtocol) error {
	p.SourceRing = &RingInfo{}
	if err := p.SourceRing.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SourceRing), err)
	}
	return nil
}

func (p *ContextInfo) readField3(iprot thrift.TProtocol) error {
	p.SourceNode = &NodeInfo{}
	if err := p.SourceNode.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SourceNode), err)
	}
	return nil
}

func (p *ContextInfo) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.TargetNodeID = v
	}
	return nil
}

func (p *ContextInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ContextInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ContextInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sourceHost", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sourceHost: ", p), err)
	}
	if err := p.SourceHost.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SourceHost), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sourceHost: ", p), err)
	}
	return err
}

func (p *ContextInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sourceRing", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sourceRing: ", p), err)
	}
	if err := p.SourceRing.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SourceRing), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sourceRing: ", p), err)
	}
	return err
}

func (p *ContextInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sourceNode", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sourceNode: ", p), err)
	}
	if err := p.SourceNode.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SourceNode), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sourceNode: ", p), err)
	}
	return err
}

func (p *ContextInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("targetNodeID", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:targetNodeID: ", p), err)
	}
	if err := oprot.WriteBinary(p.TargetNodeID); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.targetNodeID (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:targetNodeID: ", p), err)
	}
	return err
}

func (p *ContextInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContextInfo(%+v)", *p)
}

// Used to store results when doing Lookup-like requests.
//
// Attributes:
//  - Found
//  - NodesPath
//  - HostsRef
type LookupData struct {
	Found     bool        `thrift:"found,1" json:"found"`
	NodesPath []*NodeInfo `thrift:"nodesPath,2" json:"nodesPath"`
	HostsRef  []*HostInfo `thrift:"hostsRef,3" json:"hostsRef"`
}

func NewLookupData() *LookupData {
	return &LookupData{}
}

func (p *LookupData) GetFound() bool {
	return p.Found
}

func (p *LookupData) GetNodesPath() []*NodeInfo {
	return p.NodesPath
}

func (p *LookupData) GetHostsRef() []*HostInfo {
	return p.HostsRef
}
func (p *LookupData) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LookupData) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Found = v
	}
	return nil
}

func (p *LookupData) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*NodeInfo, 0, size)
	p.NodesPath = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &NodeInfo{}
		if err := _elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.NodesPath = append(p.NodesPath, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *LookupData) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*HostInfo, 0, size)
	p.HostsRef = tSlice
	for i := 0; i < size; i++ {
		_elem1 := &HostInfo{}
		if err := _elem1.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
		}
		p.HostsRef = append(p.HostsRef, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *LookupData) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("LookupData"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LookupData) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("found", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:found: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Found)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.found (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:found: ", p), err)
	}
	return err
}

func (p *LookupData) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nodesPath", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nodesPath: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.NodesPath)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.NodesPath {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nodesPath: ", p), err)
	}
	return err
}

func (p *LookupData) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hostsRef", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:hostsRef: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.HostsRef)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.HostsRef {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:hostsRef: ", p), err)
	}
	return err
}

func (p *LookupData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LookupData(%+v)", *p)
}

// Used to store results when doing Sync requests.
//
// Attributes:
//  - Accepted
//  - NextNodes
//  - HostsRef
type SyncData struct {
	Accepted  bool        `thrift:"accepted,1" json:"accepted"`
	NextNodes []*NodeInfo `thrift:"nextNodes,2" json:"nextNodes"`
	HostsRef  []*HostInfo `thrift:"hostsRef,3" json:"hostsRef"`
}

func NewSyncData() *SyncData {
	return &SyncData{}
}

func (p *SyncData) GetAccepted() bool {
	return p.Accepted
}

func (p *SyncData) GetNextNodes() []*NodeInfo {
	return p.NextNodes
}

func (p *SyncData) GetHostsRef() []*HostInfo {
	return p.HostsRef
}
func (p *SyncData) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SyncData) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Accepted = v
	}
	return nil
}

func (p *SyncData) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*NodeInfo, 0, size)
	p.NextNodes = tSlice
	for i := 0; i < size; i++ {
		_elem2 := &NodeInfo{}
		if err := _elem2.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
		}
		p.NextNodes = append(p.NextNodes, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *SyncData) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*HostInfo, 0, size)
	p.HostsRef = tSlice
	for i := 0; i < size; i++ {
		_elem3 := &HostInfo{}
		if err := _elem3.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
		}
		p.HostsRef = append(p.HostsRef, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *SyncData) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SyncData"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SyncData) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("accepted", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:accepted: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Accepted)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.accepted (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:accepted: ", p), err)
	}
	return err
}

func (p *SyncData) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nextNodes", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nextNodes: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.NextNodes)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.NextNodes {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nextNodes: ", p), err)
	}
	return err
}

func (p *SyncData) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hostsRef", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:hostsRef: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.HostsRef)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.HostsRef {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:hostsRef: ", p), err)
	}
	return err
}

func (p *SyncData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SyncData(%+v)", *p)
}
