// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package vpp2papi

import (
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"github.com/ufoot/vapor/vpcommonapi"
	"math"
)

// (needed to ensure safety because of naive import list construction.)
var _ = math.MinInt32
var _ = thrift.ZERO
var _ = fmt.Printf

var _ = vpcommonapi.GoUnusedProtection__

type VpP2pApi interface {
	vpcommonapi.VpCommonApi
	//VpP2pApi is used to communicate between 2 Vapor nodes
	//in peer-to-peer mode.

	// Halt stops the server.
	Halt() (err error)
}

//VpP2pApi is used to communicate between 2 Vapor nodes
//in peer-to-peer mode.
type VpP2pApiClient struct {
	*vpcommonapi.VpCommonApiClient
}

func NewVpP2pApiClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *VpP2pApiClient {
	return &VpP2pApiClient{VpCommonApiClient: vpcommonapi.NewVpCommonApiClientFactory(t, f)}
}

func NewVpP2pApiClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *VpP2pApiClient {
	return &VpP2pApiClient{VpCommonApiClient: vpcommonapi.NewVpCommonApiClientProtocol(t, iprot, oprot)}
}

// Halt stops the server.
func (p *VpP2pApiClient) Halt() (err error) {
	if err = p.sendHalt(); err != nil {
		return
	}
	return
}

func (p *VpP2pApiClient) sendHalt() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("halt", thrift.CALL, p.SeqId)
	args0 := NewHaltArgs()
	err = args0.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *VpP2pApiClient) recvHalt() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error3 error
		error3, err = error2.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error3
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result1 := NewHaltResult()
	err = result1.Read(iprot)
	iprot.ReadMessageEnd()
	return
}

type VpP2pApiProcessor struct {
	*vpcommonapi.VpCommonApiProcessor
}

func NewVpP2pApiProcessor(handler VpP2pApi) *VpP2pApiProcessor {
	self4 := &VpP2pApiProcessor{vpcommonapi.NewVpCommonApiProcessor(handler)}
	self4.AddToProcessorMap("halt", &vpP2pApiProcessorHalt{handler: handler})
	return self4
}

type vpP2pApiProcessorHalt struct {
	handler VpP2pApi
}

func (p *vpP2pApiProcessorHalt) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewHaltArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("halt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewHaltResult()
	if err = p.handler.Halt(); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing halt: "+err.Error())
		oprot.WriteMessageBegin("halt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("halt", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type HaltArgs struct {
}

func NewHaltArgs() *HaltArgs {
	return &HaltArgs{}
}

func (p *HaltArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *HaltArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("halt_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *HaltArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HaltArgs(%+v)", *p)
}

type HaltResult struct {
}

func NewHaltResult() *HaltResult {
	return &HaltResult{}
}

func (p *HaltResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *HaltResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("halt_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *HaltResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HaltResult(%+v)", *p)
}
